name: build

on:
  push:
    paths-ignore:
      - "**.md"
      - ".gitignore"

jobs:
  linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          path: lcfetch

      - name: Install dependencies
        run: |
          sudo apt update -q
          sudo apt install -y -q build-essential libreadline-dev libx11-dev libxrandr-dev

      - name: Install xmake
        uses: xmake-io/github-action-setup-xmake@v1
        with:
          xmake-version: latest

      - name: Build lcfetch
        run: |
          cd ./lcfetch
          xmake -y

      - name: Upload produced binary
        uses: actions/upload-artifact@v2
        with:
          name: lcfetch-linux-x86_64
          path: ./lcfetch/build/linux/x86_64/release/lcfetch
          if-no-files-found: error

  # macos:
  #   runs-on: macos-latest
  #   steps:
  #     - name: Checkout source code
  #       uses: actions/checkout@v2
  #       with:
  #         path: lcfetch

  #     - name: Install xmake
  #       uses: xmake-io/github-action-setup-xmake@v1
  #       with:
  #         xmake-version: latest

  #     # Update xmake repository (in order to have the file that will be cached)
  #     - name: Update xmake repository
  #       run: xmake repo --update

  #     # Cache xmake dependencies because it's slow as hell in MacOS
  #     - uses: actions/cache@v2
  #       with:
  #         path: /Users/runneradmin/.xmake/packages
  #         key: ${{ runner.os }}-${{ matrix.arch }}-${{ matrix.mode }}-${{ hashFiles('xmake.lua') }}-${{ hashFiles('/Users/runneradmin/.xmake/xmake.conf') }}-${{ hashFiles('/Users/runneradmin/.xmake/repositories/**') }}

  #     - name: Build lcfetch
  #       run: |
  #         cd ./lcfetch
  #         xmake -y

  #     - name: Upload produced binary
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: lcfetch-macosx-x86_64
  #         path: ./lcfetch/build/macosx/x86_64/release/lcfetch
  #         if-no-files-found: error

  release:
    name: Release to GitHub
    if: contains(github.event.head_commit.message, 'release:') && github.repository == 'NTBBloodbath/lcfetch'
    needs: [linux]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          repository: ${{ github.repository }}
          path: "workspace"
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/download-artifact@v2
        with:
          name: lcfetch-linux-x86_64

      - name: Compress Linux binaries
        run: |
          chmod +x lcfetch
          tar caf lcfetch-linux-x86_64.tar.xz lcfetch && rm lcfetch
          ls -lh

      - name: Setup Release information
        run: |
          versionName=`sed '11q;d' ./workspace/src/include/lcfetch.h | cut -d "\"" -f2 | xargs`
          export VERSION_NAME=$versionName
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV

      - name: Extract release notes
        id: extract-release-notes
        uses: ffurrer2/extract-release-notes@v1
        with:
          changelog_file: ./workspace/CHANGELOG.md

      - name: Create Release
        uses: Xotl/cool-github-releases@v1
        with:
          mode: update
          isDraft: false
          isPrerelease: false
          tag_name: v${{ env.VERSION_NAME }}
          release_name: v${{ env.VERSION_NAME }}
          assets: lcfetch-x86_64.tar.xz
          body_mrkdwn: ${{ steps.extract-release-notes.outputs.release_notes }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
